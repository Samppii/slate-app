import { NextResponse } from 'next/server'

export async function GET() {
  try {
    console.log('üîÑ Generating test PDF...')
    
    // Create a minimal but valid PDF
    const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/ProcSet [/PDF /Text]
/Font <<
/F1 <<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
>>
>>
>>
endobj

4 0 obj
<<
/Length 100
>>
stream
BT
/F1 24 Tf
50 700 Td
(Test PDF Download) Tj
0 -50 Td
/F1 16 Tf
(This is a test PDF file.) Tj
0 -30 Td
(Generated by Slate App) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000015 00000 n 
0000000074 00000 n 
0000000131 00000 n 
0000000364 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
516
%%EOF`
    
    const pdfBuffer = Buffer.from(pdfContent, 'utf-8')
    
    console.log('‚úÖ Test PDF generated, size:', pdfBuffer.length, 'bytes')
    
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="test-download.pdf"',
        'Content-Length': pdfBuffer.length.toString(),
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    })
    
  } catch (error) {
    console.error('‚ùå Test PDF error:', error)
    return NextResponse.json(
      { error: 'Test PDF failed', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}